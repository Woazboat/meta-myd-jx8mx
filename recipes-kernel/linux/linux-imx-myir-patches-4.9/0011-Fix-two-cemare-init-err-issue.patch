From 682d6531b84b8b648ba2a77558b5a1d221a98cbd Mon Sep 17 00:00:00 2001
From: duxy <568988005@qq.com>
Date: Fri, 28 Dec 2018 14:50:26 +0800
Subject: [PATCH 11/34] Fix two cemare init err issue

---
 .../boot/dts/freescale/myb-fsl-imx8mq-evk.dts |   6 +-
 .../platform/mxc/capture/ov5640_mipi_v3.c     | 604 ++++++++++--------
 2 files changed, 337 insertions(+), 273 deletions(-)

diff --git a/arch/arm64/boot/dts/freescale/myb-fsl-imx8mq-evk.dts b/arch/arm64/boot/dts/freescale/myb-fsl-imx8mq-evk.dts
index c13e367f3d4d..b2653072ed8e 100755
--- a/arch/arm64/boot/dts/freescale/myb-fsl-imx8mq-evk.dts
+++ b/arch/arm64/boot/dts/freescale/myb-fsl-imx8mq-evk.dts
@@ -744,7 +744,7 @@
 	ov5640_mipi2: ov5640_mipi2@3c {
 		compatible = "ovti,ov5640_mipi";
 		reg = <0x3c>;
-		status = "disabled";
+		status = "okay";
 		pinctrl-names = "default";
 		pinctrl-0 = <&pinctrl_csi2>;
 		clocks = <&clk IMX8MQ_CLK_CLKO2_DIV>;
@@ -1030,7 +1030,7 @@
 &csi2_bridge {
 	fsl,mipi-mode;
 	fsl,two-8bit-sensor-mode;
-	status = "disabled";
+	status = "okay";
 
 	port {
 		csi2_ep: endpoint {
@@ -1058,7 +1058,7 @@
 &mipi_csi_2 {
 	#address-cells = <1>;
 	#size-cells = <0>;
-	status = "disabled";
+	status = "okay";
 	port {
 		mipi2_sensor_ep: endpoint1 {
 			remote-endpoint = <&ov5640_mipi2_ep>; 
diff --git a/drivers/media/platform/mxc/capture/ov5640_mipi_v3.c b/drivers/media/platform/mxc/capture/ov5640_mipi_v3.c
index 1d1f1e618cdc..68117e4e2d17 100755
--- a/drivers/media/platform/mxc/capture/ov5640_mipi_v3.c
+++ b/drivers/media/platform/mxc/capture/ov5640_mipi_v3.c
@@ -43,6 +43,10 @@
 #define OV5640_CHIP_ID_HIGH_BYTE	0x300A
 #define OV5640_CHIP_ID_LOW_BYTE		0x300B
 
+#define DEFAULT_SCCB_ID 0x78
+
+#define OV5640_NUM 2
+
 enum ov5640_mode {
 	ov5640_mode_MIN = 0,
 	ov5640_mode_VGA_640_480 = 0,
@@ -116,7 +120,8 @@ struct ov5640 {
 	struct clk *sensor_clk;
 	int csi;
 
-	void (*io_init)(void);
+	void (*io_init)(struct ov5640 *);
+	int pwn_gpio, rst_gpio,gate_gpio;
 };
 
 struct ov5640_res {
@@ -128,7 +133,6 @@ struct ov5640_res {
  * Maintains the information on the current state of the sesor.
  */
 static struct ov5640 ov5640_data;
-static int pwn_gpio, rst_gpio,gate_gpio;
 
 struct ov5640_res ov5640_valid_res[] = {
 	[0] = {640, 480},
@@ -137,6 +141,12 @@ struct ov5640_res ov5640_valid_res[] = {
 	[3] = {1920, 1080},
 	[4] = {2592, 1944},
 };
+struct ov5640_gpio_t{
+	int pwn;
+	int rst;
+}ov5640_gpio[2]={0};
+static int init_value = 0;
+struct ov5640 *sensor = NULL;
 
 static struct reg_value ov5640_init_setting_30fps_VGA[] = {
 
@@ -389,13 +399,14 @@ static struct regulator *io_regulator;
 static struct regulator *core_regulator;
 static struct regulator *analog_regulator;
 static struct regulator *gpo_regulator;
+static DEFINE_MUTEX(ov5640_mutex);
 
 static int ov5640_probe(struct i2c_client *adapter,
 				const struct i2c_device_id *device_id);
 static int ov5640_remove(struct i2c_client *client);
 
-static s32 ov5640_read_reg(u16 reg, u8 *val);
-static s32 ov5640_write_reg(u16 reg, u8 val);
+static s32 ov5640_read_reg(struct ov5640 *sensor, u16 reg, u8 *val);
+static s32 ov5640_write_reg(struct ov5640 *sensor, u16 reg, u8 val);
 
 static const struct i2c_device_id ov5640_id[] = {
 	{"ov5640_mipi", 0},
@@ -449,86 +460,78 @@ static const struct ov5640_datafmt
 	return NULL;
 }
 
-static inline void ov5640_power_down(int enable)
+static inline void ov5640_power_down(struct ov5640 *sensor, int enable)
 {
-	if (pwn_gpio < 0)
+	if (sensor->pwn_gpio < 0)
 		return;
 
 	if (!enable)
-		gpio_set_value_cansleep(pwn_gpio, 0);
+		gpio_set_value_cansleep(sensor->pwn_gpio, 0);
 	else
-		gpio_set_value_cansleep(pwn_gpio, 1);
+		gpio_set_value_cansleep(sensor->pwn_gpio, 1);
 
 	msleep(2);
 }
-/*
-
-static void ov5640_reset(void) { 	
-
-	gpio_set_value(rst_gpio, 1);  	
-
-	gpio_set_value(pwn_gpio, 1); 	
-	msleep(5);  	
-	gpio_set_value(pwn_gpio, 0); 	
-	msleep(5);  	
-	gpio_set_value(rst_gpio, 0); 	
-	msleep(1);  	
-	gpio_set_value(rst_gpio, 1); 	
-	msleep(5);  	
-	gpio_set_value(pwn_gpio, 1); 
-}
-
-
-
-static void ov5640_reset(void)
+static inline void ov5640_dual_power_down(int enable)
 {
-	if (rst_gpio < 0 || pwn_gpio < 0)
+	if (ov5640_gpio[1].pwn < 0)
 		return;
-	
-	gpio_set_value(rst_gpio, 1);
 
-	gpio_set_value(pwn_gpio, 1);
-	msleep(5);
-
-	gpio_set_value(rst_gpio, 0);
-	msleep(1);
-
-	gpio_set_value(pwn_gpio, 0);
-	msleep(5);
-
-	gpio_set_value(rst_gpio, 1);
-	msleep(5);
-	
+	if (!enable){
+		gpio_set_value_cansleep(ov5640_gpio[0].pwn, 0);
+		gpio_set_value_cansleep(ov5640_gpio[1].pwn, 0);
+	}
+	else{
+		gpio_set_value_cansleep(ov5640_gpio[0].pwn, 1);
+		gpio_set_value_cansleep(ov5640_gpio[1].pwn, 1);
+	}
+	msleep(2);
 }
 
 
-*/
 
 
-static void ov5640_reset(void)
+static void ov5640_reset(struct ov5640 *sensor)
 {
-	gpio_set_value_cansleep(pwn_gpio, 1);
-	gpio_set_value_cansleep(rst_gpio, 0);
+	gpio_set_value_cansleep(sensor->pwn_gpio, 1);
+	gpio_set_value_cansleep(sensor->rst_gpio, 0);
 	printk("set pwn 1 rst 0\n");
 	msleep(5);
-	gpio_set_value_cansleep(pwn_gpio, 0);
+	gpio_set_value_cansleep(sensor->pwn_gpio, 0);
 	printk("set pwn 0\n");
 	msleep(1);
 
-	gpio_set_value_cansleep(rst_gpio, 1);
+	gpio_set_value_cansleep(sensor->rst_gpio, 1);
 	msleep(20);
 	printk("set rst 1\n");
 }
 
+static void ov5640_dual_reset(void)
+{
+	gpio_set_value_cansleep(ov5640_gpio[0].pwn, 1);
+	gpio_set_value_cansleep(ov5640_gpio[1].pwn, 1);
+	gpio_set_value_cansleep(ov5640_gpio[0].rst, 0);
+	printk("set dual pwn 1 rst 0\n");
+	msleep(5);
+	gpio_set_value_cansleep(ov5640_gpio[0].pwn, 0);
+	gpio_set_value_cansleep(ov5640_gpio[1].pwn, 0);
+	printk("set dual pwn 0\n");
+	msleep(1);
+
+	gpio_set_value_cansleep(ov5640_gpio[0].rst, 1);
+	msleep(20);
+	printk("set dual rst 1\n");
+}
 
-static void ov5640_per_reset(void)
+
+static void ov5640_per_reset(struct ov5640 *sensor)
 {
-	if (rst_gpio < 0 || pwn_gpio < 0)
+	if (sensor->rst_gpio < 0 || sensor->pwn_gpio < 0)
 		return;
 
-	gpio_set_value(pwn_gpio, 1);
+	gpio_set_value(sensor->pwn_gpio, 1);
 
-	gpio_set_value(rst_gpio, 0);
+	gpio_set_value(sensor->rst_gpio, 0);
 	msleep(5);
 
 	
@@ -596,41 +599,39 @@ static int ov5640_regulator_enable(struct device *dev)
 	return ret;
 }
 
-static s32 ov5640_write_reg(u16 reg, u8 val)
+static s32 ov5640_write_reg(struct ov5640 *sensor, u16 reg, u8 val)
 {
+	struct device *dev = &sensor->i2c_client->dev;
 	u8 au8Buf[3] = {0};
 
 	au8Buf[0] = reg >> 8;
 	au8Buf[1] = reg & 0xff;
 	au8Buf[2] = val;
 
-	if (i2c_master_send(ov5640_data.i2c_client, au8Buf, 3) < 0) {
-		pr_err("%s:write reg error:reg=%x,val=%x\n",
-			__func__, reg, val);
+	if (i2c_master_send(sensor->i2c_client, au8Buf, 3) < 0) {
+		dev_err(dev, "Write reg error: reg=%x, val=%x\n", reg, val);
 		return -1;
 	}
 
 	return 0;
 }
 
-static s32 ov5640_read_reg(u16 reg, u8 *val)
+static s32 ov5640_read_reg(struct ov5640 *sensor, u16 reg, u8 *val)
 {
+	struct device *dev = &sensor->i2c_client->dev;
 	u8 au8RegBuf[2] = {0};
 	u8 u8RdVal = 0;
 
 	au8RegBuf[0] = reg >> 8;
 	au8RegBuf[1] = reg & 0xff;
-	int ret  =0;
-	ret = i2c_master_send(ov5640_data.i2c_client, au8RegBuf, 2);
-	if (2 != ret ) {
-		pr_err("%s:write reg error:reg=%x ret[%d]\n",
-				__func__, reg,ret);
+
+	if (i2c_master_send(sensor->i2c_client, au8RegBuf, 2) != 2) {
+		dev_err(dev, "Read reg error: reg=%x\n", reg);
 		return -1;
 	}
 
-	if (1 != i2c_master_recv(ov5640_data.i2c_client, &u8RdVal, 1)) {
-		pr_err("%s:read reg error:reg=%x,val=%x\n",
-				__func__, reg, u8RdVal);
+	if (i2c_master_recv(sensor->i2c_client, &u8RdVal, 1) != 1) {
+		dev_err(dev, "Read reg error: reg=%x, val=%x\n", reg, u8RdVal);
 		return -1;
 	}
 
@@ -642,21 +643,21 @@ static s32 ov5640_read_reg(u16 reg, u8 *val)
 static int prev_sysclk, prev_HTS;
 static int AE_low, AE_high, AE_Target = 52;
 
-static void OV5640_stream_on(void)
+static void OV5640_stream_on(struct ov5640 *sensor)
 {
-	ov5640_write_reg(0x4202, 0x00);
+	ov5640_write_reg(sensor, 0x4202, 0x00);
 }
 
-static void OV5640_stream_off(void)
+static void OV5640_stream_off(struct ov5640 *sensor)
 {
-	ov5640_write_reg(0x4202, 0x0f);
-	ov5640_write_reg(0x3008, 0x42);
+	ov5640_write_reg(sensor, 0x4202, 0x0f);
+	ov5640_write_reg(sensor, 0x3008, 0x42);
 }
 
-static int OV5640_get_sysclk(void)
+static int OV5640_get_sysclk(struct ov5640 *sensor)
 {
 	 /* calculate sysclk */
-	int xvclk = ov5640_data.mclk / 10000;
+	int xvclk = sensor->mclk / 10000;
 	int temp1, temp2;
 	int Multiplier, PreDiv, VCO, SysDiv, Pll_rdiv;
 	int Bit_div2x = 1, sclk_rdiv, sysclk;
@@ -664,24 +665,24 @@ static int OV5640_get_sysclk(void)
 
 	int sclk_rdiv_map[] = {1, 2, 4, 8};
 
-	temp1 = ov5640_read_reg(0x3034, &temp);
+	temp1 = ov5640_read_reg(sensor, 0x3034, &temp);
 	temp2 = temp1 & 0x0f;
 	if (temp2 == 8 || temp2 == 10)
 		Bit_div2x = temp2 / 2;
 
-	temp1 = ov5640_read_reg(0x3035, &temp);
+	temp1 = ov5640_read_reg(sensor, 0x3035, &temp);
 	SysDiv = temp1>>4;
 	if (SysDiv == 0)
 		SysDiv = 16;
 
-	temp1 = ov5640_read_reg(0x3036, &temp);
+	temp1 = ov5640_read_reg(sensor, 0x3036, &temp);
 	Multiplier = temp1;
 
-	temp1 = ov5640_read_reg(0x3037, &temp);
+	temp1 = ov5640_read_reg(sensor, 0x3037, &temp);
 	PreDiv = temp1 & 0x0f;
 	Pll_rdiv = ((temp1 >> 4) & 0x01) + 1;
 
-	temp1 = ov5640_read_reg(0x3108, &temp);
+	temp1 = ov5640_read_reg(sensor, 0x3108, &temp);
 	temp2 = temp1 & 0x03;
 	sclk_rdiv = sclk_rdiv_map[temp2];
 
@@ -692,70 +693,70 @@ static int OV5640_get_sysclk(void)
 	return sysclk;
 }
 
-static void OV5640_set_night_mode(void)
+static void OV5640_set_night_mode(struct ov5640 *sensor)
 {
 	 /* read HTS from register settings */
 	u8 mode;
 
-	ov5640_read_reg(0x3a00, &mode);
+	ov5640_read_reg(sensor, 0x3a00, &mode);
 	mode &= 0xfb;
-	ov5640_write_reg(0x3a00, mode);
+	ov5640_write_reg(sensor, 0x3a00, mode);
 }
 
-static int OV5640_get_HTS(void)
+static int OV5640_get_HTS(struct ov5640 *sensor)
 {
 	 /* read HTS from register settings */
 	int HTS;
 	u8 temp;
 
-	HTS = ov5640_read_reg(0x380c, &temp);
-	HTS = (HTS<<8) + ov5640_read_reg(0x380d, &temp);
+	HTS = ov5640_read_reg(sensor, 0x380c, &temp);
+	HTS = (HTS<<8) + ov5640_read_reg(sensor, 0x380d, &temp);
 
 	return HTS;
 }
 
-static int OV5640_get_VTS(void)
+static int OV5640_get_VTS(struct ov5640 *sensor)
 {
 	 /* read VTS from register settings */
 	int VTS;
 	u8 temp;
 
 	/* total vertical size[15:8] high byte */
-	VTS = ov5640_read_reg(0x380e, &temp);
+	VTS = ov5640_read_reg(sensor, 0x380e, &temp);
 
-	VTS = (VTS<<8) + ov5640_read_reg(0x380f, &temp);
+	VTS = (VTS<<8) + ov5640_read_reg(sensor, 0x380f, &temp);
 
 	return VTS;
 }
 
-static int OV5640_set_VTS(int VTS)
+static int OV5640_set_VTS(struct ov5640 *sensor, int VTS)
 {
 	 /* write VTS to registers */
 	 int temp;
 
 	 temp = VTS & 0xff;
-	 ov5640_write_reg(0x380f, temp);
+	 ov5640_write_reg(sensor, 0x380f, temp);
 
 	 temp = VTS>>8;
-	 ov5640_write_reg(0x380e, temp);
+	 ov5640_write_reg(sensor, 0x380e, temp);
 
 	 return 0;
 }
 
-static int OV5640_get_shutter(void)
+static int OV5640_get_shutter(struct ov5640 *sensor)
 {
 	 /* read shutter, in number of line period */
 	int shutter;
 	u8 temp;
 
-	shutter = (ov5640_read_reg(0x03500, &temp) & 0x0f);
-	shutter = (shutter<<8) + ov5640_read_reg(0x3501, &temp);
-	shutter = (shutter<<4) + (ov5640_read_reg(0x3502, &temp)>>4);
+	shutter = (ov5640_read_reg(sensor, 0x03500, &temp) & 0x0f);
+	shutter = (shutter<<8) + ov5640_read_reg(sensor, 0x3501, &temp);
+	shutter = (shutter<<4) + (ov5640_read_reg(sensor, 0x3502, &temp)>>4);
 
 	 return shutter;
 }
 
-static int OV5640_set_shutter(int shutter)
+static int OV5640_set_shutter(struct ov5640 *sensor, int shutter)
 {
 	 /* write shutter, in number of line period */
 	 int temp;
@@ -764,56 +765,57 @@ static int OV5640_set_shutter(int shutter)
 
 	 temp = shutter & 0x0f;
 	 temp = temp<<4;
-	 ov5640_write_reg(0x3502, temp);
+	 ov5640_write_reg(sensor, 0x3502, temp);
 
 	 temp = shutter & 0xfff;
 	 temp = temp>>4;
-	 ov5640_write_reg(0x3501, temp);
+	 ov5640_write_reg(sensor, 0x3501, temp);
 
 	 temp = shutter>>12;
-	 ov5640_write_reg(0x3500, temp);
+	 ov5640_write_reg(sensor, 0x3500, temp);
 
 	 return 0;
 }
 
-static int OV5640_get_gain16(void)
+
+static int OV5640_get_gain16(struct ov5640 *sensor)
 {
 	 /* read gain, 16 = 1x */
 	int gain16;
 	u8 temp;
 
-	gain16 = ov5640_read_reg(0x350a, &temp) & 0x03;
-	gain16 = (gain16<<8) + ov5640_read_reg(0x350b, &temp);
+	gain16 = ov5640_read_reg(sensor, 0x350a, &temp) & 0x03;
+	gain16 = (gain16<<8) + ov5640_read_reg(sensor, 0x350b, &temp);
 
 	return gain16;
 }
 
-static int OV5640_set_gain16(int gain16)
+static int OV5640_set_gain16(struct ov5640 *sensor, int gain16)
 {
 	/* write gain, 16 = 1x */
 	u8 temp;
 	gain16 = gain16 & 0x3ff;
 
 	temp = gain16 & 0xff;
-	ov5640_write_reg(0x350b, temp);
+	ov5640_write_reg(sensor, 0x350b, temp);
 
 	temp = gain16>>8;
-	ov5640_write_reg(0x350a, temp);
+	ov5640_write_reg(sensor, 0x350a, temp);
 
 	return 0;
 }
 
-static int OV5640_get_light_freq(void)
+static int OV5640_get_light_freq(struct ov5640 *sensor)
 {
 	/* get banding filter value */
 	int temp, temp1, light_freq = 0;
 	u8 tmp;
 
-	temp = ov5640_read_reg(0x3c01, &tmp);
+	temp = ov5640_read_reg(sensor, 0x3c01, &tmp);
 
 	if (temp & 0x80) {
 		/* manual */
-		temp1 = ov5640_read_reg(0x3c00, &tmp);
+		temp1 = ov5640_read_reg(sensor, 0x3c00, &tmp);
 		if (temp1 & 0x04) {
 			/* 50Hz */
 			light_freq = 50;
@@ -823,7 +825,7 @@ static int OV5640_get_light_freq(void)
 		}
 	} else {
 		/* auto */
-		temp1 = ov5640_read_reg(0x3c0c, &tmp);
+		temp1 = ov5640_read_reg(sensor, 0x3c0c, &tmp);
 		if (temp1 & 0x01) {
 			/* 50Hz */
 			light_freq = 50;
@@ -834,38 +836,38 @@ static int OV5640_get_light_freq(void)
 	return light_freq;
 }
 
-static void OV5640_set_bandingfilter(void)
+static void OV5640_set_bandingfilter(struct ov5640 *sensor)
 {
 	int prev_VTS;
 	int band_step60, max_band60, band_step50, max_band50;
 
 	/* read preview PCLK */
-	prev_sysclk = OV5640_get_sysclk();
+	prev_sysclk = OV5640_get_sysclk(sensor);
 	/* read preview HTS */
-	prev_HTS = OV5640_get_HTS();
+	prev_HTS = OV5640_get_HTS(sensor);
 
 	/* read preview VTS */
-	prev_VTS = OV5640_get_VTS();
+	prev_VTS = OV5640_get_VTS(sensor);
 
 	/* calculate banding filter */
 	/* 60Hz */
 	band_step60 = prev_sysclk * 100/prev_HTS * 100/120;
-	ov5640_write_reg(0x3a0a, (band_step60 >> 8));
-	ov5640_write_reg(0x3a0b, (band_step60 & 0xff));
+	ov5640_write_reg(sensor, 0x3a0a, (band_step60 >> 8));
+	ov5640_write_reg(sensor, 0x3a0b, (band_step60 & 0xff));
 
 	max_band60 = (int)((prev_VTS-4)/band_step60);
-	ov5640_write_reg(0x3a0d, max_band60);
+	ov5640_write_reg(sensor, 0x3a0d, max_band60);
 
 	/* 50Hz */
 	band_step50 = prev_sysclk * 100/prev_HTS;
-	ov5640_write_reg(0x3a08, (band_step50 >> 8));
-	ov5640_write_reg(0x3a09, (band_step50 & 0xff));
+	ov5640_write_reg(sensor, 0x3a08, (band_step50 >> 8));
+	ov5640_write_reg(sensor, 0x3a09, (band_step50 & 0xff));
 
 	max_band50 = (int)((prev_VTS-4)/band_step50);
-	ov5640_write_reg(0x3a0e, max_band50);
+	ov5640_write_reg(sensor, 0x3a0e, max_band50);
 }
 
-static int OV5640_set_AE_target(int target)
+static int OV5640_set_AE_target(struct ov5640 *sensor, int target)
 {
 	/* stable in high */
 	int fast_high, fast_low;
@@ -878,21 +880,21 @@ static int OV5640_set_AE_target(int target)
 
 	fast_low = AE_low >> 1;
 
-	ov5640_write_reg(0x3a0f, AE_high);
-	ov5640_write_reg(0x3a10, AE_low);
-	ov5640_write_reg(0x3a1b, AE_high);
-	ov5640_write_reg(0x3a1e, AE_low);
-	ov5640_write_reg(0x3a11, fast_high);
-	ov5640_write_reg(0x3a1f, fast_low);
+	ov5640_write_reg(sensor, 0x3a0f, AE_high);
+	ov5640_write_reg(sensor, 0x3a10, AE_low);
+	ov5640_write_reg(sensor, 0x3a1b, AE_high);
+	ov5640_write_reg(sensor, 0x3a1e, AE_low);
+	ov5640_write_reg(sensor, 0x3a11, fast_high);
+	ov5640_write_reg(sensor, 0x3a1f, fast_low);
 
 	return 0;
 }
 
-static void OV5640_turn_on_AE_AG(int enable)
+static void OV5640_turn_on_AE_AG(struct ov5640 *sensor, int enable)
 {
 	u8 ae_ag_ctrl;
 
-	ov5640_read_reg(0x3503, &ae_ag_ctrl);
+	ov5640_read_reg(sensor, 0x3503, &ae_ag_ctrl);
 	if (enable) {
 		/* turn on auto AE/AG */
 		ae_ag_ctrl = ae_ag_ctrl & ~(0x03);
@@ -900,13 +902,13 @@ static void OV5640_turn_on_AE_AG(int enable)
 		/* turn off AE/AG */
 		ae_ag_ctrl = ae_ag_ctrl | 0x03;
 	}
-	ov5640_write_reg(0x3503, ae_ag_ctrl);
+	ov5640_write_reg(sensor, 0x3503, ae_ag_ctrl);
 }
 
-static bool binning_on(void)
+static bool binning_on(struct ov5640 *sensor)
 {
 	u8 temp;
-	ov5640_read_reg(0x3821, &temp);
+	ov5640_read_reg(sensor, 0x3821, &temp);
 	temp &= 0xfe;
 	if (temp)
 		return true;
@@ -914,17 +916,19 @@ static bool binning_on(void)
 		return false;
 }
 
-static void ov5640_set_virtual_channel(int channel)
+static void ov5640_set_virtual_channel(struct ov5640 *sensor, int channel)
 {
 	u8 channel_id;
 
-	ov5640_read_reg(0x4814, &channel_id);
+	ov5640_read_reg(sensor, 0x4814, &channel_id);
 	channel_id &= ~(3 << 6);
-	ov5640_write_reg(0x4814, channel_id | (channel << 6));
+	ov5640_write_reg(sensor, 0x4814, channel_id | (channel << 6));
 }
 
 /* download ov5640 settings to sensor through i2c */
-static int ov5640_download_firmware(struct reg_value *pModeSetting, s32 ArySize)
+static int ov5640_download_firmware(struct ov5640 *sensor,
+				    struct reg_value *pModeSetting,
+				    s32 ArySize)
 {
 	register u32 Delay_ms = 0;
 	register u16 RegAddr = 0;
@@ -940,7 +944,7 @@ static int ov5640_download_firmware(struct reg_value *pModeSetting, s32 ArySize)
 		Mask = pModeSetting->u8Mask;
 
 		if (Mask) {
-			retval = ov5640_read_reg(RegAddr, &RegVal);
+			retval = ov5640_read_reg(sensor, RegAddr, &RegVal);
 			if (retval < 0)
 				goto err;
 
@@ -949,7 +953,7 @@ static int ov5640_download_firmware(struct reg_value *pModeSetting, s32 ArySize)
 			Val |= RegVal;
 		}
 
-		retval = ov5640_write_reg(RegAddr, Val);
+		retval = ov5640_write_reg(sensor, RegAddr, Val);
 		if (retval < 0)
 			goto err;
 
@@ -963,7 +967,8 @@ static int ov5640_download_firmware(struct reg_value *pModeSetting, s32 ArySize)
 /* sensor changes between scaling and subsampling
  * go through exposure calcualtion
  */
-static int ov5640_change_mode_exposure_calc(enum ov5640_frame_rate frame_rate,
+static int ov5640_change_mode_exposure_calc(struct ov5640 *sensor,
+				enum ov5640_frame_rate frame_rate,
 				enum ov5640_mode mode)
 {
 	struct reg_value *pModeSetting = NULL;
@@ -982,12 +987,12 @@ static int ov5640_change_mode_exposure_calc(enum ov5640_frame_rate frame_rate,
 	ArySize =
 		ov5640_mode_info_data[frame_rate][mode].init_data_size;
 
-	ov5640_data.pix.width =
+	sensor->pix.width =
 		ov5640_mode_info_data[frame_rate][mode].width;
-	ov5640_data.pix.height =
+	sensor->pix.height =
 		ov5640_mode_info_data[frame_rate][mode].height;
 
-	if (ov5640_data.pix.width == 0 || ov5640_data.pix.height == 0 ||
+	if (sensor->pix.width == 0 || sensor->pix.height == 0 ||
 		pModeSetting == NULL || ArySize == 0)
 		return -EINVAL;
 
@@ -995,40 +1000,40 @@ static int ov5640_change_mode_exposure_calc(enum ov5640_frame_rate frame_rate,
 	/* OV5640_auto_focus();//if no af function, just skip it */
 
 	/* turn off AE/AG */
-	OV5640_turn_on_AE_AG(0);
+	OV5640_turn_on_AE_AG(sensor, 0);
 
 	/* read preview shutter */
-	prev_shutter = OV5640_get_shutter();
-	if ((binning_on()) && (mode != ov5640_mode_720P_1280_720)
+	prev_shutter = OV5640_get_shutter(sensor);
+	if ((binning_on(sensor)) && (mode != ov5640_mode_720P_1280_720)
 			&& (mode != ov5640_mode_1080P_1920_1080))
 		prev_shutter *= 2;
 
 	/* read preview gain */
-	prev_gain16 = OV5640_get_gain16();
+	prev_gain16 = OV5640_get_gain16(sensor);
 
 	/* get average */
-	ov5640_read_reg(0x56a1, &average);
+	ov5640_read_reg(sensor, 0x56a1, &average);
 
 	/* turn off night mode for capture */
-	OV5640_set_night_mode();
+	OV5640_set_night_mode(sensor);
 
 	/* turn off overlay */
 	/* ov5640_write_reg(0x3022, 0x06);//if no af function, just skip it */
 
-	OV5640_stream_off();
+	OV5640_stream_off(sensor);
 
 	/* Write capture setting */
-	retval = ov5640_download_firmware(pModeSetting, ArySize);
+	retval = ov5640_download_firmware(sensor, pModeSetting, ArySize);
 	if (retval < 0)
 		goto err;
 
 	/* read capture VTS */
-	cap_VTS = OV5640_get_VTS();
-	cap_HTS = OV5640_get_HTS();
-	cap_sysclk = OV5640_get_sysclk();
+	cap_VTS = OV5640_get_VTS(sensor);
+	cap_HTS = OV5640_get_HTS(sensor);
+	cap_sysclk = OV5640_get_sysclk(sensor);
 
 	/* calculate capture banding filter */
-	light_freq = OV5640_get_light_freq();
+	light_freq = OV5640_get_light_freq(sensor);
 	if (light_freq == 60) {
 		/* 60Hz */
 		cap_bandfilt = cap_sysclk * 100 / cap_HTS * 100 / 120;
@@ -1076,14 +1081,14 @@ static int ov5640_change_mode_exposure_calc(enum ov5640_frame_rate frame_rate,
 	}
 
 	/* write capture gain */
-	OV5640_set_gain16(cap_gain16);
+	OV5640_set_gain16(sensor, cap_gain16);
 
 	/* write capture shutter */
 	if (cap_shutter > (cap_VTS - 4)) {
 		cap_VTS = cap_shutter + 4;
-		OV5640_set_VTS(cap_VTS);
+		OV5640_set_VTS(sensor, cap_VTS);
 	}
-	OV5640_set_shutter(cap_shutter);
+	OV5640_set_shutter(sensor, cap_shutter);
 
 err:
 	return retval;
@@ -1092,7 +1097,8 @@ static int ov5640_change_mode_exposure_calc(enum ov5640_frame_rate frame_rate,
 /* if sensor changes inside scaling or subsampling
  * change mode directly
  * */
-static int ov5640_change_mode_direct(enum ov5640_frame_rate frame_rate,
+static int ov5640_change_mode_direct(struct ov5640 *sensor,
+				enum ov5640_frame_rate frame_rate,
 				enum ov5640_mode mode)
 {
 	struct reg_value *pModeSetting = NULL;
@@ -1105,34 +1111,36 @@ static int ov5640_change_mode_direct(enum ov5640_frame_rate frame_rate,
 	ArySize =
 		ov5640_mode_info_data[frame_rate][mode].init_data_size;
 
-	ov5640_data.pix.width =
+	sensor->pix.width =
 		ov5640_mode_info_data[frame_rate][mode].width;
-	ov5640_data.pix.height =
+	sensor->pix.height =
 		ov5640_mode_info_data[frame_rate][mode].height;
 
-	if (ov5640_data.pix.width == 0 || ov5640_data.pix.height == 0 ||
+	if (sensor->pix.width == 0 || sensor->pix.height == 0 ||
 		pModeSetting == NULL || ArySize == 0)
 		return -EINVAL;
 
 	/* turn off AE/AG */
-	OV5640_turn_on_AE_AG(0);
+	OV5640_turn_on_AE_AG(sensor, 0);
 
-	OV5640_stream_off();
+	OV5640_stream_off(sensor);
 
 	/* Write capture setting */
-	retval = ov5640_download_firmware(pModeSetting, ArySize);
+	retval = ov5640_download_firmware(sensor, pModeSetting, ArySize);
 	if (retval < 0)
 		goto err;
 
-	OV5640_turn_on_AE_AG(1);
+	OV5640_turn_on_AE_AG(sensor, 1);
 
 err:
 	return retval;
 }
 
-static int ov5640_init_mode(enum ov5640_frame_rate frame_rate,
+static int ov5640_init_mode(struct ov5640 *sensor,
+			    enum ov5640_frame_rate frame_rate,
 			    enum ov5640_mode mode, enum ov5640_mode orig_mode)
 {
+	struct device *dev = &sensor->i2c_client->dev;
 	struct reg_value *pModeSetting = NULL;
 	s32 ArySize = 0;
 	int retval = 0;
@@ -1141,41 +1149,46 @@ static int ov5640_init_mode(enum ov5640_frame_rate frame_rate,
 
 	if ((mode > ov5640_mode_MAX || mode < ov5640_mode_MIN)
 		&& (mode != ov5640_mode_INIT)) {
-		pr_err("Wrong ov5640 mode detected!\n");
+		dev_err(dev, "Wrong ov5640 mode detected!\n");
 		return -1;
 	}
+
 	dn_mode = ov5640_mode_info_data[frame_rate][mode].dn_mode;
 	orig_dn_mode = ov5640_mode_info_data[frame_rate][orig_mode].dn_mode;
 	if (mode == ov5640_mode_INIT) {
 		pModeSetting = ov5640_init_setting_30fps_VGA;
 		ArySize = ARRAY_SIZE(ov5640_init_setting_30fps_VGA);
 
-		ov5640_data.pix.width = 640;
-		ov5640_data.pix.height = 480;
-		retval = ov5640_download_firmware(pModeSetting, ArySize);
+		sensor->pix.width = 640;
+		sensor->pix.height = 480;
+		retval = ov5640_download_firmware(sensor, pModeSetting,
+						  ArySize);
 		if (retval < 0)
 			goto err;
 
 		pModeSetting = ov5640_setting_30fps_VGA_640_480;
 		ArySize = ARRAY_SIZE(ov5640_setting_30fps_VGA_640_480);
-		retval = ov5640_download_firmware(pModeSetting, ArySize);
+		retval = ov5640_download_firmware(sensor, pModeSetting,
+						  ArySize);
 	} else if ((dn_mode == SUBSAMPLING && orig_dn_mode == SCALING) ||
 			(dn_mode == SCALING && orig_dn_mode == SUBSAMPLING)) {
 		/* change between subsampling and scaling
 		 * go through exposure calucation */
-		retval = ov5640_change_mode_exposure_calc(frame_rate, mode);
+		retval = ov5640_change_mode_exposure_calc(sensor,
+				frame_rate, mode);
 	} else {
 		/* change inside subsampling or scaling
 		 * download firmware directly */
-		retval = ov5640_change_mode_direct(frame_rate, mode);
+		retval = ov5640_change_mode_direct(sensor, frame_rate, mode);
 	}
+
 	if (retval < 0)
 		goto err;
 
-	OV5640_set_AE_target(AE_Target);
-	OV5640_get_light_freq();
-	OV5640_set_bandingfilter();
-	ov5640_set_virtual_channel(ov5640_data.csi);
+	OV5640_set_AE_target(sensor, AE_Target);
+	OV5640_get_light_freq(sensor);
+	OV5640_set_bandingfilter(sensor);
+	ov5640_set_virtual_channel(sensor, sensor->csi);
 
 	/* add delay to wait for sensor stable */
 	if (mode == ov5640_mode_QSXGA_2592_1944) {
@@ -1245,6 +1258,7 @@ static int ov5640_g_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct ov5640 *sensor = to_ov5640(client);
+	struct device *dev = &sensor->i2c_client->dev;
 	struct v4l2_captureparm *cparm = &a->parm.capture;
 	int ret = 0;
 
@@ -1270,7 +1284,7 @@ static int ov5640_g_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 		break;
 
 	default:
-		pr_debug("   type is unknown - %d\n", a->type);
+		dev_warn(dev, "Type is unknown - %d\n", a->type);
 		ret = -EINVAL;
 		break;
 	}
@@ -1291,11 +1305,13 @@ static int ov5640_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct ov5640 *sensor = to_ov5640(client);
+	struct device *dev = &sensor->i2c_client->dev;
 	struct v4l2_fract *timeperframe = &a->parm.capture.timeperframe;
 	u32 tgt_fps;	/* target frames per secound */
 	enum ov5640_frame_rate frame_rate;
 	enum ov5640_mode orig_mode;
 	int ret = 0;
+
 	switch (a->type) {
 	/* This is the only case currently handled. */
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
@@ -1326,14 +1342,15 @@ static int ov5640_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 		else if (tgt_fps == 30)
 			frame_rate = ov5640_30_fps;
 		else {
-			pr_err(" The camera frame rate is not supported!\n");
+			dev_warn(dev,
+				"The camera frame rate is not supported!\n");
 			return -EINVAL;
 		}
 
 		orig_mode = sensor->streamcap.capturemode;
-		//ret = ov5640_init_mode(frame_rate,
+		//ret = ov5640_init_mode(sensor,frame_rate,
 		//		(u32)a->parm.capture.capturemode, orig_mode);
-		ret = ov5640_init_mode(frame_rate,
+		ret = ov5640_init_mode(sensor,frame_rate,
 				 orig_mode,(u32)a->parm.capture.capturemode);
 		if (ret < 0)
 			return ret;
@@ -1351,14 +1368,13 @@ static int ov5640_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 	case V4L2_BUF_TYPE_VBI_OUTPUT:
 	case V4L2_BUF_TYPE_SLICED_VBI_CAPTURE:
 	case V4L2_BUF_TYPE_SLICED_VBI_OUTPUT:
-		pr_debug("   type is not " \
-			"V4L2_BUF_TYPE_VIDEO_CAPTURE but %d\n",
+		dev_warn(dev, "Type is not V4L2_BUF_TYPE_VIDEO_CAPTURE but %d\n",
 			a->type);
 		ret = -EINVAL;
 		break;
 
 	default:
-		pr_debug("   type is unknown - %d\n", a->type);
+		dev_warn(dev, "Type is unknown - %d\n", a->type);
 		ret = -EINVAL;
 		break;
 	}
@@ -1387,17 +1403,17 @@ static int ov5640_set_fmt(struct v4l2_subdev *sd,
 		return 0;
 
 	sensor->fmt = fmt;
-	
 
 	capturemode = get_capturemode(mf->width, mf->height);
 	if (capturemode >= 0) {
-		ov5640_data.streamcap.capturemode = capturemode;
-		ov5640_data.pix.width = mf->width;
-		ov5640_data.pix.height = mf->height;
+		sensor->streamcap.capturemode = capturemode;
+		sensor->pix.width = mf->width;
+		sensor->pix.height = mf->height;
 		return 0;
 	}
 
-	dev_err(&client->dev, "%s set fail\n", __func__);
+	dev_err(&client->dev, "Set format failed %d, %d\n",
+		fmt->code, fmt->colorspace);
 	return -EINVAL;
 }
 
@@ -1410,6 +1426,7 @@ static int ov5640_get_fmt(struct v4l2_subdev *sd,
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct ov5640 *sensor = to_ov5640(client);
 	const struct ov5640_datafmt *fmt = sensor->fmt;
+
 	if (format->pad)
 		return -EINVAL;
 
@@ -1417,8 +1434,8 @@ static int ov5640_get_fmt(struct v4l2_subdev *sd,
 	mf->colorspace	= fmt->colorspace;
 	mf->field	= V4L2_FIELD_NONE;
 
-	mf->width	= ov5640_data.pix.width;
-	mf->height	= ov5640_data.pix.height;
+	mf->width	= sensor->pix.width;
+	mf->height	= sensor->pix.height;
 
 	return 0;
 }
@@ -1472,6 +1489,8 @@ static int ov5640_enum_frameintervals(struct v4l2_subdev *sd,
 		struct v4l2_subdev_pad_config *cfg,
 		struct v4l2_subdev_frame_interval_enum *fie)
 {
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct device *dev = &client->dev;
 	int i, j, count = 0;
 
 	if (fie->index < 0 || fie->index > ov5640_mode_MAX)
@@ -1479,7 +1498,7 @@ static int ov5640_enum_frameintervals(struct v4l2_subdev *sd,
 
 	if (fie->width == 0 || fie->height == 0 ||
 	    fie->code == 0) {
-		pr_warning("Please assign pixel format, width and height.\n");
+		dev_warn(dev, "Please assign pixel format, width and height\n");
 		return -EINVAL;
 	}
 
@@ -1509,26 +1528,27 @@ static int ov5640_enum_frameintervals(struct v4l2_subdev *sd,
  * @s: pointer to standard V4L2 device structure
  *
  */
-static int init_device(void)
+static int init_device(struct ov5640 *sensor)
 {
+	struct device *dev = &sensor->i2c_client->dev;
 	u32 tgt_xclk;	/* target xclk */
 	u32 tgt_fps;	/* target frames per secound */
 	enum ov5640_frame_rate frame_rate;
 	int ret;
 
-	ov5640_data.on = true;
+	sensor->on = true;
 
 	/* mclk */
-	tgt_xclk = ov5640_data.mclk;
+	tgt_xclk = sensor->mclk;
 	tgt_xclk = min(tgt_xclk, (u32)OV5640_XCLK_MAX);
 	tgt_xclk = max(tgt_xclk, (u32)OV5640_XCLK_MIN);
-	ov5640_data.mclk = tgt_xclk;
+	sensor->mclk = tgt_xclk;
 
-	pr_debug("   Setting mclk to %d MHz\n", tgt_xclk / 1000000);
+	dev_dbg(dev, "Setting mclk to %d MHz\n", tgt_xclk / 1000000);
 
 	/* Default camera frame rate is set in probe */
-	tgt_fps = ov5640_data.streamcap.timeperframe.denominator /
-		  ov5640_data.streamcap.timeperframe.numerator;
+	tgt_fps = sensor->streamcap.timeperframe.denominator /
+		  sensor->streamcap.timeperframe.numerator;
 
 	if (tgt_fps == 15)
 		frame_rate = ov5640_15_fps;
@@ -1537,17 +1557,23 @@ static int init_device(void)
 	else
 		return -EINVAL; /* Only support 15fps or 30fps now. */
 
-	ret = ov5640_init_mode(frame_rate, ov5640_mode_INIT, ov5640_mode_INIT);
+	ret = ov5640_init_mode(sensor, frame_rate, ov5640_mode_INIT,
+			       ov5640_mode_INIT);
 
 	return ret;
 }
 
 static int ov5640_s_stream(struct v4l2_subdev *sd, int enable)
 {
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct ov5640 *sensor = to_ov5640(client);
+	struct device *dev = &sensor->i2c_client->dev;
+
+	dev_info(dev, "s_stream: %d\n", enable);
 	if (enable)
-		OV5640_stream_on();
+		OV5640_stream_on(sensor);
 	else
-		OV5640_stream_off();
+		OV5640_stream_off(sensor);
 	return 0;
 }
 
@@ -1593,6 +1619,49 @@ static void ov5640_adjust_setting_20mhz(void)
 			regsetting->u8Val = 0x17;
 }
 
+static int ov5640_model_init(struct ov5640 *sensor)
+{
+	int retval = -1;
+	u8 chip_id_high, chip_id_low;
+	struct device *dev = &sensor->i2c_client->dev;
+	retval = ov5640_read_reg(sensor, OV5640_CHIP_ID_HIGH_BYTE,
+					 &chip_id_high);
+	if (retval < 0 || chip_id_high != 0x56) {
+		dev_warn(dev, "Camera is not found\n");
+		clk_disable_unprepare(sensor[init_value-1].sensor_clk);
+		return -ENODEV;
+	}
+	retval = ov5640_read_reg(sensor, OV5640_CHIP_ID_LOW_BYTE, &chip_id_low);
+	if (retval < 0 || chip_id_low != 0x40) {
+		dev_warn(dev, "Camera is not found\n");
+		clk_disable_unprepare(sensor[init_value-1].sensor_clk);
+		return -ENODEV;
+	}
+
+	retval = init_device(sensor);
+	if (retval < 0) {
+		clk_disable_unprepare(sensor[0].sensor_clk);
+		dev_warn(dev, "Camera init failed\n");
+		ov5640_power_down(sensor, 1);
+		return retval;
+	}
+
+
+
+	v4l2_i2c_subdev_init(&sensor[0].subdev, sensor[0].i2c_client, &ov5640_subdev_ops);
+
+	sensor[0].subdev.grp_id = 678;
+	retval = v4l2_async_register_subdev(&sensor[0].subdev);
+	if (retval < 0)
+		dev_err(dev, "Async register failed, ret=%d\n",
+			retval);
+
+
+	OV5640_stream_off(sensor);
+	dev_info(dev, "Camera is found\n");
+	return retval;
+
+}
 
 /*!
  * ov5640 I2C probe function
@@ -1606,18 +1675,26 @@ static int ov5640_probe(struct i2c_client *client,
 	struct pinctrl *pinctrl;
 	struct device *dev = &client->dev;
 	int retval;
+	int num;
 	u8 chip_id_high, chip_id_low;
+	
+	printk("ccym init_value[%d]\n",init_value);
+	if(!sensor){ 
+		sensor = kmalloc(OV5640_NUM*sizeof(*sensor), GFP_KERNEL);
+		/* Set initial values for the sensor struct. */
+		memset(sensor, 0, OV5640_NUM*sizeof(*sensor));
+	}
 	/* ov5640 pinctrl */
 	pinctrl = devm_pinctrl_get_select_default(dev);
 	if (IS_ERR(pinctrl))
-		dev_warn(dev, "no pin available\n");
+		dev_warn(dev, "No pin available\n");
 
 
-	gate_gpio= of_get_named_gpio(dev->of_node, "gate-gpios", 0);
-	if (!gpio_is_valid(pwn_gpio))
+	sensor[init_value].gate_gpio= of_get_named_gpio(dev->of_node, "gate-gpios", 0);
+	if (!gpio_is_valid(sensor[init_value].gate_gpio))
 		dev_warn(dev, "no sensor gatepin available");
 	else {
-		retval = devm_gpio_request_one(dev, gate_gpio, GPIOF_OUT_INIT_HIGH,
+		retval = devm_gpio_request_one(dev, sensor[init_value].gate_gpio, GPIOF_OUT_INIT_HIGH,
 						"ov5640_mipi_gate");
 		if (retval < 0) {
 			dev_warn(dev, "Failed to set gate pin\n");
@@ -1627,117 +1704,103 @@ static int ov5640_probe(struct i2c_client *client,
 	}
 
 	/* request power down pin */
-	pwn_gpio = of_get_named_gpio(dev->of_node, "pwn-gpios", 0);
-	if (!gpio_is_valid(pwn_gpio))
-		dev_warn(dev, "no sensor pwdn pin available");
+	sensor[init_value].pwn_gpio = of_get_named_gpio(dev->of_node, "pwn-gpios", 0);
+	if (!gpio_is_valid(sensor[init_value].pwn_gpio))
+		dev_warn(dev, "No sensor pwdn pin available");
 	else {
-		retval = devm_gpio_request_one(dev, pwn_gpio, GPIOF_OUT_INIT_HIGH,
-						"ov5640_mipi_pwdn");
+		retval = devm_gpio_request_one(dev, sensor[init_value].pwn_gpio,
+				GPIOF_OUT_INIT_HIGH, "ov5640_mipi_pwdn");
 		if (retval < 0) {
 			dev_warn(dev, "Failed to set power pin\n");
 			dev_warn(dev, "retval=%d\n", retval);
 			return retval;
 		}
 	}
-
+	ov5640_gpio[init_value].pwn=sensor[init_value].pwn_gpio;
 	/* request reset pin */
-	rst_gpio = of_get_named_gpio(dev->of_node, "rst-gpios", 0);
-	if (!gpio_is_valid(rst_gpio))
-		dev_warn(dev, "no sensor reset pin available");
-	else {	
-		retval = devm_gpio_request_one(dev, rst_gpio, GPIOF_OUT_INIT_LOW,
-						"ov5640_mipi_reset");
+	sensor[init_value].rst_gpio = of_get_named_gpio(dev->of_node, "rst-gpios", 0);
+	if (!gpio_is_valid(sensor[init_value].rst_gpio))
+		dev_warn(dev, "No sensor reset pin available");
+	else {
+		retval = devm_gpio_request_one(dev, sensor[init_value].rst_gpio,
+				GPIOF_OUT_INIT_HIGH, "ov5640_mipi_reset");
 		if (retval < 0) {
 			dev_warn(dev, "Failed to set reset pin\n");
-			return retval;
+		//	return retval;
 		}
 	}
 
-	/* Set initial values for the sensor struct. */
-	memset(&ov5640_data, 0, sizeof(ov5640_data));
-	ov5640_data.sensor_clk = devm_clk_get(dev, "csi_mclk");
-	if (IS_ERR(ov5640_data.sensor_clk)) {
+	ov5640_gpio[init_value].rst=sensor[init_value].rst_gpio;
+
+	sensor[init_value].sensor_clk = devm_clk_get(dev, "csi_mclk");
+	if (IS_ERR(sensor[init_value].sensor_clk)) {
 		/* assuming clock enabled by default */
-		ov5640_data.sensor_clk = NULL;
+		sensor[init_value].sensor_clk = NULL;
 		dev_err(dev, "clock-frequency missing or invalid\n");
-		return PTR_ERR(ov5640_data.sensor_clk);
+		return PTR_ERR(sensor[init_value].sensor_clk);
 	}
 
 	retval = of_property_read_u32(dev->of_node, "mclk",
-					&(ov5640_data.mclk));
+					&(sensor[init_value].mclk));
 	if (retval) {
 		dev_err(dev, "mclk missing or invalid\n");
 		return retval;
 	}
 
-	if (ov5640_data.mclk == OV5640_XCLK_20MHZ)
+	if (sensor[init_value].mclk == OV5640_XCLK_20MHZ)
 		ov5640_adjust_setting_20mhz();
 
 	retval = of_property_read_u32(dev->of_node, "mclk_source",
-					(u32 *) &(ov5640_data.mclk_source));
+					(u32 *) &(sensor[init_value].mclk_source));
 	if (retval) {
 		dev_err(dev, "mclk_source missing or invalid\n");
 		return retval;
 	}
 
 	retval = of_property_read_u32(dev->of_node, "csi_id",
-					&(ov5640_data.csi));
+					&(sensor[init_value].csi));
 	if (retval) {
 		dev_err(dev, "csi id missing or invalid\n");
 		return retval;
 	}
 
-	retval = clk_prepare_enable(ov5640_data.sensor_clk);
+	
 
-	ov5640_data.io_init = ov5640_reset;
-	ov5640_data.i2c_client = client;
-	ov5640_data.pix.pixelformat = V4L2_PIX_FMT_YUYV;
-	ov5640_data.pix.width = 640;
-	ov5640_data.pix.height = 480;
-	ov5640_data.streamcap.capability = V4L2_MODE_HIGHQUALITY |
+	sensor[init_value].io_init = ov5640_reset;
+	sensor[init_value].i2c_client = client;
+	sensor[init_value].pix.pixelformat = V4L2_PIX_FMT_YUYV;
+	sensor[init_value].pix.width = 640;
+	sensor[init_value].pix.height = 480;
+	sensor[init_value].streamcap.capability = V4L2_MODE_HIGHQUALITY |
 					   V4L2_CAP_TIMEPERFRAME;
-	ov5640_data.streamcap.capturemode = 0;
-	ov5640_data.streamcap.timeperframe.denominator = DEFAULT_FPS;
-	ov5640_data.streamcap.timeperframe.numerator = 1;
-	ov5640_regulator_enable(&client->dev);
+	sensor[init_value].streamcap.capturemode = 0;
+	sensor[init_value].streamcap.timeperframe.denominator = DEFAULT_FPS;
+	sensor[init_value].streamcap.timeperframe.numerator = 1;
 
-	ov5640_reset();
+	if(init_value == 0){
+		init_value++;
+		return 0;
+	}
 
+	clk_prepare_enable(sensor[init_value-1].sensor_clk);
+	clk_prepare_enable(sensor[init_value].sensor_clk);
 
-	ov5640_power_down(0);
+	ov5640_regulator_enable(&sensor[init_value-1].i2c_client->dev);
 
-	retval = ov5640_read_reg(OV5640_CHIP_ID_HIGH_BYTE, &chip_id_high);
-	if (retval < 0 || chip_id_high != 0x56) {
-		pr_warning("camera ov5640_mipi is not found\n");
-		clk_disable_unprepare(ov5640_data.sensor_clk);
-		msleep(1000);
-		return -ENODEV;
-	}
-	retval = ov5640_read_reg(OV5640_CHIP_ID_LOW_BYTE, &chip_id_low);
-	if (retval < 0 || chip_id_low != 0x40) {
-		pr_warning("camera ov5640_mipi is not found\n");
-		clk_disable_unprepare(ov5640_data.sensor_clk);
-		return -ENODEV;
-	}
+	ov5640_regulator_enable(&sensor[init_value].i2c_client->dev);
 
-	retval = init_device();
-	if (retval < 0) {
-		clk_disable_unprepare(ov5640_data.sensor_clk);
-		pr_warning("camera ov5640 init failed\n");
-		ov5640_power_down(1);
-		return retval;
-	}
+	mutex_lock(&ov5640_mutex);
+	{
+		ov5640_dual_reset();
+		ov5640_dual_power_down(0);
 
-	v4l2_i2c_subdev_init(&ov5640_data.subdev, client, &ov5640_subdev_ops);
+	}
+	mutex_unlock(&ov5640_mutex);
 
-	ov5640_data.subdev.grp_id = 678;
-	retval = v4l2_async_register_subdev(&ov5640_data.subdev);
-	if (retval < 0)
-		dev_err(&client->dev,
-					"%s--Async register failed, ret=%d\n", __func__, retval);
+	for(num = 0 ; num <= init_value; num++){
+		retval = ov5640_model_init(sensor+num);
+	}
 
-	OV5640_stream_off();
-	pr_info("camera ov5640_mipi is found\n");
 	return retval;
 }
 
@@ -1750,12 +1813,13 @@ static int ov5640_probe(struct i2c_client *client,
 static int ov5640_remove(struct i2c_client *client)
 {
 	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov5640 *sensor = to_ov5640(client);
 
 	v4l2_async_unregister_subdev(sd);
 
-	clk_disable_unprepare(ov5640_data.sensor_clk);
+	clk_disable_unprepare(sensor->sensor_clk);
 
-	ov5640_power_down(1);
+	ov5640_power_down(sensor, 1);
 
 	if (gpo_regulator)
 		regulator_disable(gpo_regulator);
-- 
2.24.1

