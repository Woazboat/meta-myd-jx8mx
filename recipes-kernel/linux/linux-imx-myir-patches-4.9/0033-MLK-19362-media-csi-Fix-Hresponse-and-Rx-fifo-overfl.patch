From ba10382d16a117d0d17aa314049f0ebf7e2af86c Mon Sep 17 00:00:00 2001
From: duxy <568988005@qq.com>
Date: Wed, 21 Aug 2019 16:02:07 +0800
Subject: [PATCH 33/34] MLK-19362: media: csi: Fix "Hresponse" and "Rx fifo
 overflow" camera errors

---
 .../media/platform/imx8/mxc-mipi-csi2_yav.c   |  3 +-
 .../media/platform/mxc/capture/mx6s_capture.c | 38 ++++++++++++++-----
 2 files changed, 30 insertions(+), 11 deletions(-)
 mode change 100644 => 100755 drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
 mode change 100644 => 100755 drivers/media/platform/mxc/capture/mx6s_capture.c

diff --git a/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c b/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
old mode 100644
new mode 100755
index 950b1d3149fd..41face51138f
--- a/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
+++ b/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
@@ -406,11 +406,10 @@ static int mipi_csi2_set_fmt(struct v4l2_subdev *sd,
 
 	if (fmt->format.width * fmt->format.height > 720 * 480) {
 		csi2dev->hs_settle = rxhs_settle[1];
-		csi2dev->send_level = 0x300;
 	} else {
 		csi2dev->hs_settle = rxhs_settle[0];
-		csi2dev->send_level = 0x240;
 	}
+	csi2dev->send_level = 64;
 
 	return v4l2_subdev_call(sensor_sd, pad, set_fmt, NULL, fmt);
 }
diff --git a/drivers/media/platform/mxc/capture/mx6s_capture.c b/drivers/media/platform/mxc/capture/mx6s_capture.c
old mode 100644
new mode 100755
index 262618c0c076..851432d8536f
--- a/drivers/media/platform/mxc/capture/mx6s_capture.c
+++ b/drivers/media/platform/mxc/capture/mx6s_capture.c
@@ -295,6 +295,11 @@ struct mx6s_csi_mux {
 	u8 req_bit;
 };
 
+struct mx6s_csi_soc {
+	bool rx_fifo_rst;
+	int baseaddr_switch;
+};
+
 struct mx6s_csi_dev {
 	struct device		*dev;
 	struct video_device *vdev;
@@ -339,7 +344,7 @@ struct mx6s_csi_dev {
 
 	bool csi_mipi_mode;
 	bool csi_two_8bit_sensor_mode;
-	const bool *rx_fifo_rst;
+	const struct mx6s_csi_soc *soc;
 	struct mx6s_csi_mux csi_mux;
 };
 
@@ -445,7 +450,9 @@ static void csisw_reset(struct mx6s_csi_dev *csi_dev)
 	isr = csi_read(csi_dev, CSI_CSISR);
 	csi_write(csi_dev, isr, CSI_CSISR);
 
-	/* Ensable csi  */
+	cr18 |= csi_dev->soc->baseaddr_switch;
+
+	/* Enable csi  */
 	cr18 |= BIT_CSI_ENABLE;
 	csi_write(csi_dev, cr18, CSI_CSICR18);
 }
@@ -856,7 +863,7 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 		csi_write(csi_dev, cr1, CSI_CSICR1);
 
 		cr18 = csi_read(csi_dev, CSI_CSICR18);
-		cr18 &= BIT_MIPI_DATA_FORMAT_MASK;
+		cr18 &= ~BIT_MIPI_DATA_FORMAT_MASK;
 		cr18 |= BIT_DATA_FROM_MIPI;
 
 		switch (csi_dev->fmt->pixelformat) {
@@ -1098,7 +1105,7 @@ static irqreturn_t mx6s_csi_irq_handler(int irq, void *data)
 
 	if (status & BIT_RFF_OR_INT) {
 		dev_warn(csi_dev->dev, "%s Rx fifo overflow\n", __func__);
-		if (*csi_dev->rx_fifo_rst)
+		if (csi_dev->soc->rx_fifo_rst)
 			csi_error_recovery(csi_dev);
 	}
 
@@ -1863,7 +1870,7 @@ static int mx6s_csi_probe(struct platform_device *pdev)
 	of_id = of_match_node(mx6s_csi_dt_ids, csi_dev->dev->of_node);
 	if (!of_id)
 		return -EINVAL;
-	csi_dev->rx_fifo_rst = of_id->data;
+	csi_dev->soc = of_id->data;
 
 	snprintf(csi_dev->v4l2_dev.name,
 		 sizeof(csi_dev->v4l2_dev.name), "CSI");
@@ -1963,15 +1970,28 @@ static const struct dev_pm_ops mx6s_csi_pm_ops = {
 	SET_RUNTIME_PM_OPS(mx6s_csi_runtime_suspend, mx6s_csi_runtime_resume, NULL)
 };
 
-static const u8 mx6s_fifo_rst = true;
-static const u8 mx6sl_fifo_rst = false;
+static const struct mx6s_csi_soc mx6s_soc = {
+	.rx_fifo_rst = true,
+	.baseaddr_switch = 0,
+};
+static const struct mx6s_csi_soc mx6sl_soc = {
+	.rx_fifo_rst = false,
+	.baseaddr_switch = 0,
+};
+static const struct mx6s_csi_soc mx8mq_soc = {
+	.rx_fifo_rst = true,
+	.baseaddr_switch = 0x80030,
+};
 
 static const struct of_device_id mx6s_csi_dt_ids[] = {
 	{ .compatible = "fsl,imx6s-csi",
-	  .data = &mx6s_fifo_rst,
+	  .data = &mx6s_soc,
 	},
 	{ .compatible = "fsl,imx6sl-csi",
-	  .data = &mx6sl_fifo_rst,
+	  .data = &mx6sl_soc,
+	},
+	{ .compatible = "fsl,imx8mq-csi",
+	  .data = &mx8mq_soc,
 	},
 	{ /* sentinel */ }
 };
-- 
2.24.1

